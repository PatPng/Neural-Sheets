import cv2
import numpy as np
import sys
from PIL import Image
import os

# read
img = cv2.imread("img01.jpg")
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# threshold
th, threshed = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY_INV | cv2.THRESH_OTSU)

# minAreaRect on the nozeros
pts = cv2.findNonZero(threshed)
ret = cv2.minAreaRect(pts)

(cx, cy), (w, h), ang = ret
if w > h:
    w, h = h, w
    ang += 90

# find rotated matrix, do rotation
M = cv2.getRotationMatrix2D((cx, cy), ang, 1.0)
rotated = cv2.warpAffine(threshed, M, (img.shape[1], img.shape[0]))

# threshold
hist = cv2.reduce(rotated, 1, cv2.REDUCE_AVG).reshape(-1)

th = 8
H, W = img.shape[:2]
uppers = [y for y in range(H - 1) if hist[y] <= th and hist[y + 1] > th]
lowers = [y for y in range(H - 1) if hist[y] > th and hist[y + 1] <= th]

# slice and line defining and drawing
rotated = cv2.cvtColor(rotated, cv2.COLOR_GRAY2BGR)

for y in uppers:
    cv2.line(rotated, (0, y), (W, y), (255, 0, 100), 1)  # (slika, 1.tocka, 2.tocka, boja, debljina)

for y in lowers:
    cv2.line(rotated, (0, y), (W, y), (80, 30, 255), 1)

cv2.imwrite("result6.png", rotated)

# list to array conversion
up_a = np.asarray(uppers)
up = (H - up_a)
print("up_a =", up_a)

low_a = np.asarray(lowers)
low = (H - low_a)
print("low_a =", low_a)

print("Broj redova:", len(up_a))

# row slicing

im = cv2.imread("result6.png")
for f in up_a:
    i = 1
    tmp = im
    print(i)
    h_slice = tmp[(up_a[i] - 1):(low_a[i] + 1), 0:W]  # crop slike
    bound = len(up_a)
    print("Bound:", bound)
    directory = r"D:\Neural Music Sheets\data"  # novi dir
    os.chdir(directory)
    name = "h_slices\slice"  # imenovanje
    name_str = name + str(i)
    cv2.imwrite(name_str + ".jpg", h_slice)
    i = i + 1

print()

